// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cilium

import (
	"context"
	"reflect"

	"github.com/littlejo/pulumi-cilium/sdk/go/cilium/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Install struct {
	pulumi.CustomResourceState

	// Cilium certificates value, Format: `{crt: "b64...", key: "b64.."}` (Equivalent to `kubectl get secret cilium-ca -n kube-system -o yaml`)
	Ca InstallCaOutput `pulumi:"ca"`
	// Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
	DataPath pulumi.StringOutput `pulumi:"dataPath"`
	// Helm values (`helm get values -n kube-system cilium`)
	HelmValues pulumi.StringOutput `pulumi:"helmValues"`
	// Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
	Repository pulumi.StringOutput `pulumi:"repository"`
	// When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
	Reset pulumi.BoolOutput `pulumi:"reset"`
	// When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `false`).
	Reuse pulumi.BoolOutput `pulumi:"reuse"`
	// When upgrading, reset the values to the ones built into the chart, apply the last release's values and merge in any
	// overrides from the command line via --set and -f. If '--reset-values' or '--reuse-values' is specified, this is ignored
	// (Default: `true`).
	Reusethenreuse pulumi.BoolOutput `pulumi:"reusethenreuse"`
	// Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
	Sets pulumi.StringArrayOutput `pulumi:"sets"`
	// values in raw yaml to pass to helm. (Default: `empty`).
	Values pulumi.StringOutput `pulumi:"values"`
	// Version of Cilium (Default: `v1.14.5`).
	Version pulumi.StringOutput `pulumi:"version"`
	// Wait for Cilium status is ok (Default: `true`).
	Wait pulumi.BoolOutput `pulumi:"wait"`
}

// NewInstall registers a new resource with the given unique name, arguments, and options.
func NewInstall(ctx *pulumi.Context,
	name string, args *InstallArgs, opts ...pulumi.ResourceOption) (*Install, error) {
	if args == nil {
		args = &InstallArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"ca",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Install
	err := ctx.RegisterResource("cilium:index/install:Install", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstall gets an existing Install resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstall(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstallState, opts ...pulumi.ResourceOption) (*Install, error) {
	var resource Install
	err := ctx.ReadResource("cilium:index/install:Install", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Install resources.
type installState struct {
	// Cilium certificates value, Format: `{crt: "b64...", key: "b64.."}` (Equivalent to `kubectl get secret cilium-ca -n kube-system -o yaml`)
	Ca *InstallCa `pulumi:"ca"`
	// Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
	DataPath *string `pulumi:"dataPath"`
	// Helm values (`helm get values -n kube-system cilium`)
	HelmValues *string `pulumi:"helmValues"`
	// Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
	Repository *string `pulumi:"repository"`
	// When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
	Reset *bool `pulumi:"reset"`
	// When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `false`).
	Reuse *bool `pulumi:"reuse"`
	// When upgrading, reset the values to the ones built into the chart, apply the last release's values and merge in any
	// overrides from the command line via --set and -f. If '--reset-values' or '--reuse-values' is specified, this is ignored
	// (Default: `true`).
	Reusethenreuse *bool `pulumi:"reusethenreuse"`
	// Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
	Sets []string `pulumi:"sets"`
	// values in raw yaml to pass to helm. (Default: `empty`).
	Values *string `pulumi:"values"`
	// Version of Cilium (Default: `v1.14.5`).
	Version *string `pulumi:"version"`
	// Wait for Cilium status is ok (Default: `true`).
	Wait *bool `pulumi:"wait"`
}

type InstallState struct {
	// Cilium certificates value, Format: `{crt: "b64...", key: "b64.."}` (Equivalent to `kubectl get secret cilium-ca -n kube-system -o yaml`)
	Ca InstallCaPtrInput
	// Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
	DataPath pulumi.StringPtrInput
	// Helm values (`helm get values -n kube-system cilium`)
	HelmValues pulumi.StringPtrInput
	// Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
	Repository pulumi.StringPtrInput
	// When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
	Reset pulumi.BoolPtrInput
	// When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `false`).
	Reuse pulumi.BoolPtrInput
	// When upgrading, reset the values to the ones built into the chart, apply the last release's values and merge in any
	// overrides from the command line via --set and -f. If '--reset-values' or '--reuse-values' is specified, this is ignored
	// (Default: `true`).
	Reusethenreuse pulumi.BoolPtrInput
	// Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
	Sets pulumi.StringArrayInput
	// values in raw yaml to pass to helm. (Default: `empty`).
	Values pulumi.StringPtrInput
	// Version of Cilium (Default: `v1.14.5`).
	Version pulumi.StringPtrInput
	// Wait for Cilium status is ok (Default: `true`).
	Wait pulumi.BoolPtrInput
}

func (InstallState) ElementType() reflect.Type {
	return reflect.TypeOf((*installState)(nil)).Elem()
}

type installArgs struct {
	// Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
	DataPath *string `pulumi:"dataPath"`
	// Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
	Repository *string `pulumi:"repository"`
	// When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
	Reset *bool `pulumi:"reset"`
	// When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `false`).
	Reuse *bool `pulumi:"reuse"`
	// When upgrading, reset the values to the ones built into the chart, apply the last release's values and merge in any
	// overrides from the command line via --set and -f. If '--reset-values' or '--reuse-values' is specified, this is ignored
	// (Default: `true`).
	Reusethenreuse *bool `pulumi:"reusethenreuse"`
	// Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
	Sets []string `pulumi:"sets"`
	// values in raw yaml to pass to helm. (Default: `empty`).
	Values *string `pulumi:"values"`
	// Version of Cilium (Default: `v1.14.5`).
	Version *string `pulumi:"version"`
	// Wait for Cilium status is ok (Default: `true`).
	Wait *bool `pulumi:"wait"`
}

// The set of arguments for constructing a Install resource.
type InstallArgs struct {
	// Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
	DataPath pulumi.StringPtrInput
	// Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
	Repository pulumi.StringPtrInput
	// When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
	Reset pulumi.BoolPtrInput
	// When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `false`).
	Reuse pulumi.BoolPtrInput
	// When upgrading, reset the values to the ones built into the chart, apply the last release's values and merge in any
	// overrides from the command line via --set and -f. If '--reset-values' or '--reuse-values' is specified, this is ignored
	// (Default: `true`).
	Reusethenreuse pulumi.BoolPtrInput
	// Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
	Sets pulumi.StringArrayInput
	// values in raw yaml to pass to helm. (Default: `empty`).
	Values pulumi.StringPtrInput
	// Version of Cilium (Default: `v1.14.5`).
	Version pulumi.StringPtrInput
	// Wait for Cilium status is ok (Default: `true`).
	Wait pulumi.BoolPtrInput
}

func (InstallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*installArgs)(nil)).Elem()
}

type InstallInput interface {
	pulumi.Input

	ToInstallOutput() InstallOutput
	ToInstallOutputWithContext(ctx context.Context) InstallOutput
}

func (*Install) ElementType() reflect.Type {
	return reflect.TypeOf((**Install)(nil)).Elem()
}

func (i *Install) ToInstallOutput() InstallOutput {
	return i.ToInstallOutputWithContext(context.Background())
}

func (i *Install) ToInstallOutputWithContext(ctx context.Context) InstallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallOutput)
}

// InstallArrayInput is an input type that accepts InstallArray and InstallArrayOutput values.
// You can construct a concrete instance of `InstallArrayInput` via:
//
//	InstallArray{ InstallArgs{...} }
type InstallArrayInput interface {
	pulumi.Input

	ToInstallArrayOutput() InstallArrayOutput
	ToInstallArrayOutputWithContext(context.Context) InstallArrayOutput
}

type InstallArray []InstallInput

func (InstallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Install)(nil)).Elem()
}

func (i InstallArray) ToInstallArrayOutput() InstallArrayOutput {
	return i.ToInstallArrayOutputWithContext(context.Background())
}

func (i InstallArray) ToInstallArrayOutputWithContext(ctx context.Context) InstallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallArrayOutput)
}

// InstallMapInput is an input type that accepts InstallMap and InstallMapOutput values.
// You can construct a concrete instance of `InstallMapInput` via:
//
//	InstallMap{ "key": InstallArgs{...} }
type InstallMapInput interface {
	pulumi.Input

	ToInstallMapOutput() InstallMapOutput
	ToInstallMapOutputWithContext(context.Context) InstallMapOutput
}

type InstallMap map[string]InstallInput

func (InstallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Install)(nil)).Elem()
}

func (i InstallMap) ToInstallMapOutput() InstallMapOutput {
	return i.ToInstallMapOutputWithContext(context.Background())
}

func (i InstallMap) ToInstallMapOutputWithContext(ctx context.Context) InstallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallMapOutput)
}

type InstallOutput struct{ *pulumi.OutputState }

func (InstallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Install)(nil)).Elem()
}

func (o InstallOutput) ToInstallOutput() InstallOutput {
	return o
}

func (o InstallOutput) ToInstallOutputWithContext(ctx context.Context) InstallOutput {
	return o
}

// Cilium certificates value, Format: `{crt: "b64...", key: "b64.."}` (Equivalent to `kubectl get secret cilium-ca -n kube-system -o yaml`)
func (o InstallOutput) Ca() InstallCaOutput {
	return o.ApplyT(func(v *Install) InstallCaOutput { return v.Ca }).(InstallCaOutput)
}

// Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
func (o InstallOutput) DataPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Install) pulumi.StringOutput { return v.DataPath }).(pulumi.StringOutput)
}

// Helm values (`helm get values -n kube-system cilium`)
func (o InstallOutput) HelmValues() pulumi.StringOutput {
	return o.ApplyT(func(v *Install) pulumi.StringOutput { return v.HelmValues }).(pulumi.StringOutput)
}

// Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
func (o InstallOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *Install) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
func (o InstallOutput) Reset() pulumi.BoolOutput {
	return o.ApplyT(func(v *Install) pulumi.BoolOutput { return v.Reset }).(pulumi.BoolOutput)
}

// When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `false`).
func (o InstallOutput) Reuse() pulumi.BoolOutput {
	return o.ApplyT(func(v *Install) pulumi.BoolOutput { return v.Reuse }).(pulumi.BoolOutput)
}

// When upgrading, reset the values to the ones built into the chart, apply the last release's values and merge in any
// overrides from the command line via --set and -f. If '--reset-values' or '--reuse-values' is specified, this is ignored
// (Default: `true`).
func (o InstallOutput) Reusethenreuse() pulumi.BoolOutput {
	return o.ApplyT(func(v *Install) pulumi.BoolOutput { return v.Reusethenreuse }).(pulumi.BoolOutput)
}

// Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
func (o InstallOutput) Sets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Install) pulumi.StringArrayOutput { return v.Sets }).(pulumi.StringArrayOutput)
}

// values in raw yaml to pass to helm. (Default: `empty`).
func (o InstallOutput) Values() pulumi.StringOutput {
	return o.ApplyT(func(v *Install) pulumi.StringOutput { return v.Values }).(pulumi.StringOutput)
}

// Version of Cilium (Default: `v1.14.5`).
func (o InstallOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Install) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Wait for Cilium status is ok (Default: `true`).
func (o InstallOutput) Wait() pulumi.BoolOutput {
	return o.ApplyT(func(v *Install) pulumi.BoolOutput { return v.Wait }).(pulumi.BoolOutput)
}

type InstallArrayOutput struct{ *pulumi.OutputState }

func (InstallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Install)(nil)).Elem()
}

func (o InstallArrayOutput) ToInstallArrayOutput() InstallArrayOutput {
	return o
}

func (o InstallArrayOutput) ToInstallArrayOutputWithContext(ctx context.Context) InstallArrayOutput {
	return o
}

func (o InstallArrayOutput) Index(i pulumi.IntInput) InstallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Install {
		return vs[0].([]*Install)[vs[1].(int)]
	}).(InstallOutput)
}

type InstallMapOutput struct{ *pulumi.OutputState }

func (InstallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Install)(nil)).Elem()
}

func (o InstallMapOutput) ToInstallMapOutput() InstallMapOutput {
	return o
}

func (o InstallMapOutput) ToInstallMapOutputWithContext(ctx context.Context) InstallMapOutput {
	return o
}

func (o InstallMapOutput) MapIndex(k pulumi.StringInput) InstallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Install {
		return vs[0].(map[string]*Install)[vs[1].(string)]
	}).(InstallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstallInput)(nil)).Elem(), &Install{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallArrayInput)(nil)).Elem(), InstallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallMapInput)(nil)).Elem(), InstallMap{})
	pulumi.RegisterOutputType(InstallOutput{})
	pulumi.RegisterOutputType(InstallArrayOutput{})
	pulumi.RegisterOutputType(InstallMapOutput{})
}
