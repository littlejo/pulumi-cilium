# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ClustermeshArgs', 'Clustermesh']

@pulumi.input_type
class ClustermeshArgs:
    def __init__(__self__, *,
                 enable_external_workloads: Optional[pulumi.Input[bool]] = None,
                 enable_kv_store_mesh: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 wait: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Clustermesh resource.
        :param pulumi.Input[bool] enable_external_workloads: Enable support for external workloads, such as VMs (Default: `false`).
        :param pulumi.Input[bool] enable_kv_store_mesh: Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
        :param pulumi.Input[str] namespace: Namespace in which to install (Default: `kube-system`).
        :param pulumi.Input[str] service_type: Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
        :param pulumi.Input[bool] wait: Wait Cluster Mesh status is ok (Default: `true`).
        """
        if enable_external_workloads is not None:
            pulumi.set(__self__, "enable_external_workloads", enable_external_workloads)
        if enable_kv_store_mesh is not None:
            pulumi.set(__self__, "enable_kv_store_mesh", enable_kv_store_mesh)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter(name="enableExternalWorkloads")
    def enable_external_workloads(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable support for external workloads, such as VMs (Default: `false`).
        """
        return pulumi.get(self, "enable_external_workloads")

    @enable_external_workloads.setter
    def enable_external_workloads(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_external_workloads", value)

    @property
    @pulumi.getter(name="enableKvStoreMesh")
    def enable_kv_store_mesh(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
        """
        return pulumi.get(self, "enable_kv_store_mesh")

    @enable_kv_store_mesh.setter
    def enable_kv_store_mesh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_kv_store_mesh", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace in which to install (Default: `kube-system`).
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input[bool]]:
        """
        Wait Cluster Mesh status is ok (Default: `true`).
        """
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait", value)


@pulumi.input_type
class _ClustermeshState:
    def __init__(__self__, *,
                 enable_external_workloads: Optional[pulumi.Input[bool]] = None,
                 enable_kv_store_mesh: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 wait: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Clustermesh resources.
        :param pulumi.Input[bool] enable_external_workloads: Enable support for external workloads, such as VMs (Default: `false`).
        :param pulumi.Input[bool] enable_kv_store_mesh: Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
        :param pulumi.Input[str] namespace: Namespace in which to install (Default: `kube-system`).
        :param pulumi.Input[str] service_type: Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
        :param pulumi.Input[bool] wait: Wait Cluster Mesh status is ok (Default: `true`).
        """
        if enable_external_workloads is not None:
            pulumi.set(__self__, "enable_external_workloads", enable_external_workloads)
        if enable_kv_store_mesh is not None:
            pulumi.set(__self__, "enable_kv_store_mesh", enable_kv_store_mesh)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter(name="enableExternalWorkloads")
    def enable_external_workloads(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable support for external workloads, such as VMs (Default: `false`).
        """
        return pulumi.get(self, "enable_external_workloads")

    @enable_external_workloads.setter
    def enable_external_workloads(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_external_workloads", value)

    @property
    @pulumi.getter(name="enableKvStoreMesh")
    def enable_kv_store_mesh(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
        """
        return pulumi.get(self, "enable_kv_store_mesh")

    @enable_kv_store_mesh.setter
    def enable_kv_store_mesh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_kv_store_mesh", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace in which to install (Default: `kube-system`).
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input[bool]]:
        """
        Wait Cluster Mesh status is ok (Default: `true`).
        """
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait", value)


class Clustermesh(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_external_workloads: Optional[pulumi.Input[bool]] = None,
                 enable_kv_store_mesh: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 wait: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Cluster Mesh resource. This is equivalent to cilium cli: `cilium clustermesh enable` and `cilium clustermesh disable`: It manages the activation of Cluster Mesh on one Kubernetes cluster.

        ## Example Usage

        ```python
        import pulumi
        import littlejo_cilium as cilium

        example_install = cilium.Install("exampleInstall",
            sets=[
                "cluster.name=clustermesh1",
                "cluster.id=1",
                "ipam.mode=kubernetes",
            ],
            version="1.14.5")
        example_clustermesh = cilium.Clustermesh("exampleClustermesh", service_type="LoadBalancer",
        opts=pulumi.ResourceOptions(depends_on=[example_install]))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_external_workloads: Enable support for external workloads, such as VMs (Default: `false`).
        :param pulumi.Input[bool] enable_kv_store_mesh: Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
        :param pulumi.Input[str] namespace: Namespace in which to install (Default: `kube-system`).
        :param pulumi.Input[str] service_type: Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
        :param pulumi.Input[bool] wait: Wait Cluster Mesh status is ok (Default: `true`).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ClustermeshArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Cluster Mesh resource. This is equivalent to cilium cli: `cilium clustermesh enable` and `cilium clustermesh disable`: It manages the activation of Cluster Mesh on one Kubernetes cluster.

        ## Example Usage

        ```python
        import pulumi
        import littlejo_cilium as cilium

        example_install = cilium.Install("exampleInstall",
            sets=[
                "cluster.name=clustermesh1",
                "cluster.id=1",
                "ipam.mode=kubernetes",
            ],
            version="1.14.5")
        example_clustermesh = cilium.Clustermesh("exampleClustermesh", service_type="LoadBalancer",
        opts=pulumi.ResourceOptions(depends_on=[example_install]))
        ```

        :param str resource_name: The name of the resource.
        :param ClustermeshArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClustermeshArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_external_workloads: Optional[pulumi.Input[bool]] = None,
                 enable_kv_store_mesh: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 wait: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClustermeshArgs.__new__(ClustermeshArgs)

            __props__.__dict__["enable_external_workloads"] = enable_external_workloads
            __props__.__dict__["enable_kv_store_mesh"] = enable_kv_store_mesh
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["service_type"] = service_type
            __props__.__dict__["wait"] = wait
        super(Clustermesh, __self__).__init__(
            'cilium:index/clustermesh:Clustermesh',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_external_workloads: Optional[pulumi.Input[bool]] = None,
            enable_kv_store_mesh: Optional[pulumi.Input[bool]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            service_type: Optional[pulumi.Input[str]] = None,
            wait: Optional[pulumi.Input[bool]] = None) -> 'Clustermesh':
        """
        Get an existing Clustermesh resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_external_workloads: Enable support for external workloads, such as VMs (Default: `false`).
        :param pulumi.Input[bool] enable_kv_store_mesh: Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
        :param pulumi.Input[str] namespace: Namespace in which to install (Default: `kube-system`).
        :param pulumi.Input[str] service_type: Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
        :param pulumi.Input[bool] wait: Wait Cluster Mesh status is ok (Default: `true`).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClustermeshState.__new__(_ClustermeshState)

        __props__.__dict__["enable_external_workloads"] = enable_external_workloads
        __props__.__dict__["enable_kv_store_mesh"] = enable_kv_store_mesh
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["wait"] = wait
        return Clustermesh(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enableExternalWorkloads")
    def enable_external_workloads(self) -> pulumi.Output[bool]:
        """
        Enable support for external workloads, such as VMs (Default: `false`).
        """
        return pulumi.get(self, "enable_external_workloads")

    @property
    @pulumi.getter(name="enableKvStoreMesh")
    def enable_kv_store_mesh(self) -> pulumi.Output[bool]:
        """
        Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
        """
        return pulumi.get(self, "enable_kv_store_mesh")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[str]:
        """
        Namespace in which to install (Default: `kube-system`).
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output[str]:
        """
        Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def wait(self) -> pulumi.Output[bool]:
        """
        Wait Cluster Mesh status is ok (Default: `true`).
        """
        return pulumi.get(self, "wait")

