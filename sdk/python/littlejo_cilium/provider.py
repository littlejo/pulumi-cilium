# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 config_content: Optional[pulumi.Input[builtins.str]] = None,
                 config_path: Optional[pulumi.Input[builtins.str]] = None,
                 context: Optional[pulumi.Input[builtins.str]] = None,
                 helm_release: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[builtins.str] config_content: The content of kube config file (Default: ``).
        :param pulumi.Input[builtins.str] config_path: A path to a kube config file (Default: `~/.kube/config`).
        :param pulumi.Input[builtins.str] context: Context of kubeconfig file (Default: `default context`).
        :param pulumi.Input[builtins.str] helm_release: Helm Release to install cilium (Default: `Install`).
        :param pulumi.Input[builtins.str] namespace: Namespace to install cilium (Default: `kube-system`).
        """
        if config_content is not None:
            pulumi.set(__self__, "config_content", config_content)
        if config_path is not None:
            pulumi.set(__self__, "config_path", config_path)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if helm_release is not None:
            pulumi.set(__self__, "helm_release", helm_release)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="configContent")
    def config_content(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The content of kube config file (Default: ``).
        """
        return pulumi.get(self, "config_content")

    @config_content.setter
    def config_content(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "config_content", value)

    @property
    @pulumi.getter(name="configPath")
    def config_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A path to a kube config file (Default: `~/.kube/config`).
        """
        return pulumi.get(self, "config_path")

    @config_path.setter
    def config_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "config_path", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Context of kubeconfig file (Default: `default context`).
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="helmRelease")
    def helm_release(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Helm Release to install cilium (Default: `Install`).
        """
        return pulumi.get(self, "helm_release")

    @helm_release.setter
    def helm_release(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "helm_release", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Namespace to install cilium (Default: `kube-system`).
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace", value)


@pulumi.type_token("pulumi:providers:cilium")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_content: Optional[pulumi.Input[builtins.str]] = None,
                 config_path: Optional[pulumi.Input[builtins.str]] = None,
                 context: Optional[pulumi.Input[builtins.str]] = None,
                 helm_release: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        The provider type for the cilium package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] config_content: The content of kube config file (Default: ``).
        :param pulumi.Input[builtins.str] config_path: A path to a kube config file (Default: `~/.kube/config`).
        :param pulumi.Input[builtins.str] context: Context of kubeconfig file (Default: `default context`).
        :param pulumi.Input[builtins.str] helm_release: Helm Release to install cilium (Default: `Install`).
        :param pulumi.Input[builtins.str] namespace: Namespace to install cilium (Default: `kube-system`).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the cilium package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_content: Optional[pulumi.Input[builtins.str]] = None,
                 config_path: Optional[pulumi.Input[builtins.str]] = None,
                 context: Optional[pulumi.Input[builtins.str]] = None,
                 helm_release: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["config_content"] = config_content
            __props__.__dict__["config_path"] = config_path
            __props__.__dict__["context"] = context
            __props__.__dict__["helm_release"] = helm_release
            __props__.__dict__["namespace"] = namespace
        super(Provider, __self__).__init__(
            'cilium',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="configContent")
    def config_content(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The content of kube config file (Default: ``).
        """
        return pulumi.get(self, "config_content")

    @property
    @pulumi.getter(name="configPath")
    def config_path(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        A path to a kube config file (Default: `~/.kube/config`).
        """
        return pulumi.get(self, "config_path")

    @property
    @pulumi.getter
    def context(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Context of kubeconfig file (Default: `default context`).
        """
        return pulumi.get(self, "context")

    @property
    @pulumi.getter(name="helmRelease")
    def helm_release(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Helm Release to install cilium (Default: `Install`).
        """
        return pulumi.get(self, "helm_release")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Namespace to install cilium (Default: `kube-system`).
        """
        return pulumi.get(self, "namespace")

    @pulumi.output_type
    class TerraformConfigResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, dict):
                raise TypeError("Expected argument 'result' to be a dict")
            pulumi.set(__self__, "result", result)

        @property
        @pulumi.getter
        def result(self) -> Mapping[str, Any]:
            return pulumi.get(self, "result")

    def terraform_config(__self__) -> pulumi.Output['Provider.TerraformConfigResult']:
        """
        This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        return pulumi.runtime.call('pulumi:providers:cilium/terraformConfig', __args__, res=__self__, typ=Provider.TerraformConfigResult)

