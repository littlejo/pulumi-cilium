# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['InstallArgs', 'Install']

@pulumi.input_type
class InstallArgs:
    def __init__(__self__, *,
                 data_path: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[bool]] = None,
                 reuse: Optional[pulumi.Input[bool]] = None,
                 sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 values: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 wait: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Install resource.
        :param pulumi.Input[str] data_path: Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
        :param pulumi.Input[str] namespace: Namespace in which to install (Default: `kube-system`).
        :param pulumi.Input[str] repository: Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
        :param pulumi.Input[bool] reset: When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
        :param pulumi.Input[bool] reuse: When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `true`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sets: Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
        :param pulumi.Input[str] values: values in raw yaml to pass to helm. (Default: `empty`).
        :param pulumi.Input[str] version: Version of Cilium (Default: `v1.14.5`).
        :param pulumi.Input[bool] wait: Wait for Cilium status is ok (Default: `true`).
        """
        if data_path is not None:
            pulumi.set(__self__, "data_path", data_path)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if reset is not None:
            pulumi.set(__self__, "reset", reset)
        if reuse is not None:
            pulumi.set(__self__, "reuse", reuse)
        if sets is not None:
            pulumi.set(__self__, "sets", sets)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter(name="dataPath")
    def data_path(self) -> Optional[pulumi.Input[str]]:
        """
        Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
        """
        return pulumi.get(self, "data_path")

    @data_path.setter
    def data_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_path", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace in which to install (Default: `kube-system`).
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def reset(self) -> Optional[pulumi.Input[bool]]:
        """
        When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
        """
        return pulumi.get(self, "reset")

    @reset.setter
    def reset(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reset", value)

    @property
    @pulumi.getter
    def reuse(self) -> Optional[pulumi.Input[bool]]:
        """
        When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `true`).
        """
        return pulumi.get(self, "reuse")

    @reuse.setter
    def reuse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reuse", value)

    @property
    @pulumi.getter
    def sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
        """
        return pulumi.get(self, "sets")

    @sets.setter
    def sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sets", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[str]]:
        """
        values in raw yaml to pass to helm. (Default: `empty`).
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of Cilium (Default: `v1.14.5`).
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input[bool]]:
        """
        Wait for Cilium status is ok (Default: `true`).
        """
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait", value)


@pulumi.input_type
class _InstallState:
    def __init__(__self__, *,
                 data_path: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[bool]] = None,
                 reuse: Optional[pulumi.Input[bool]] = None,
                 sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 values: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 wait: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Install resources.
        :param pulumi.Input[str] data_path: Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
        :param pulumi.Input[str] namespace: Namespace in which to install (Default: `kube-system`).
        :param pulumi.Input[str] repository: Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
        :param pulumi.Input[bool] reset: When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
        :param pulumi.Input[bool] reuse: When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `true`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sets: Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
        :param pulumi.Input[str] values: values in raw yaml to pass to helm. (Default: `empty`).
        :param pulumi.Input[str] version: Version of Cilium (Default: `v1.14.5`).
        :param pulumi.Input[bool] wait: Wait for Cilium status is ok (Default: `true`).
        """
        if data_path is not None:
            pulumi.set(__self__, "data_path", data_path)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if reset is not None:
            pulumi.set(__self__, "reset", reset)
        if reuse is not None:
            pulumi.set(__self__, "reuse", reuse)
        if sets is not None:
            pulumi.set(__self__, "sets", sets)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter(name="dataPath")
    def data_path(self) -> Optional[pulumi.Input[str]]:
        """
        Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
        """
        return pulumi.get(self, "data_path")

    @data_path.setter
    def data_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_path", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace in which to install (Default: `kube-system`).
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def reset(self) -> Optional[pulumi.Input[bool]]:
        """
        When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
        """
        return pulumi.get(self, "reset")

    @reset.setter
    def reset(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reset", value)

    @property
    @pulumi.getter
    def reuse(self) -> Optional[pulumi.Input[bool]]:
        """
        When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `true`).
        """
        return pulumi.get(self, "reuse")

    @reuse.setter
    def reuse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reuse", value)

    @property
    @pulumi.getter
    def sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
        """
        return pulumi.get(self, "sets")

    @sets.setter
    def sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sets", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[str]]:
        """
        values in raw yaml to pass to helm. (Default: `empty`).
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of Cilium (Default: `v1.14.5`).
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input[bool]]:
        """
        Wait for Cilium status is ok (Default: `true`).
        """
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait", value)


class Install(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_path: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[bool]] = None,
                 reuse: Optional[pulumi.Input[bool]] = None,
                 sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 values: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 wait: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Install resource for Cilium. This is equivalent to cilium cli: `cilium install`, `cilium upgrade` and `cilium uninstall`: It manages cilium helm chart

        ## Example Usage

        ```python
        import pulumi
        import littlejo_cilium as cilium
        import pulumi_kind as kind

        examplekind_cluster = kind.index.Kind_cluster("examplekind_cluster",
            name=test-cluster,
            kind_config=[{
                kind: Cluster,
                apiVersion: kind.x-k8s.io/v1alpha4,
                node: [
                    {
                        role: control-plane,
                    },
                    {
                        role: worker,
                    },
                ],
                networking: [{
                    disableDefaultCni: True,
                }],
            }])
        example_install = cilium.Install("exampleInstall",
            sets=[
                "ipam.mode=kubernetes",
                "ipam.operator.replicas=1",
                "tunnel=vxlan",
            ],
            version="1.14.5")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] data_path: Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
        :param pulumi.Input[str] namespace: Namespace in which to install (Default: `kube-system`).
        :param pulumi.Input[str] repository: Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
        :param pulumi.Input[bool] reset: When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
        :param pulumi.Input[bool] reuse: When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `true`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sets: Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
        :param pulumi.Input[str] values: values in raw yaml to pass to helm. (Default: `empty`).
        :param pulumi.Input[str] version: Version of Cilium (Default: `v1.14.5`).
        :param pulumi.Input[bool] wait: Wait for Cilium status is ok (Default: `true`).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[InstallArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Install resource for Cilium. This is equivalent to cilium cli: `cilium install`, `cilium upgrade` and `cilium uninstall`: It manages cilium helm chart

        ## Example Usage

        ```python
        import pulumi
        import littlejo_cilium as cilium
        import pulumi_kind as kind

        examplekind_cluster = kind.index.Kind_cluster("examplekind_cluster",
            name=test-cluster,
            kind_config=[{
                kind: Cluster,
                apiVersion: kind.x-k8s.io/v1alpha4,
                node: [
                    {
                        role: control-plane,
                    },
                    {
                        role: worker,
                    },
                ],
                networking: [{
                    disableDefaultCni: True,
                }],
            }])
        example_install = cilium.Install("exampleInstall",
            sets=[
                "ipam.mode=kubernetes",
                "ipam.operator.replicas=1",
                "tunnel=vxlan",
            ],
            version="1.14.5")
        ```

        :param str resource_name: The name of the resource.
        :param InstallArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstallArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_path: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[bool]] = None,
                 reuse: Optional[pulumi.Input[bool]] = None,
                 sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 values: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 wait: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstallArgs.__new__(InstallArgs)

            __props__.__dict__["data_path"] = data_path
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["repository"] = repository
            __props__.__dict__["reset"] = reset
            __props__.__dict__["reuse"] = reuse
            __props__.__dict__["sets"] = sets
            __props__.__dict__["values"] = values
            __props__.__dict__["version"] = version
            __props__.__dict__["wait"] = wait
        super(Install, __self__).__init__(
            'cilium:index/install:Install',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            data_path: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            repository: Optional[pulumi.Input[str]] = None,
            reset: Optional[pulumi.Input[bool]] = None,
            reuse: Optional[pulumi.Input[bool]] = None,
            sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            values: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None,
            wait: Optional[pulumi.Input[bool]] = None) -> 'Install':
        """
        Get an existing Install resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] data_path: Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
        :param pulumi.Input[str] namespace: Namespace in which to install (Default: `kube-system`).
        :param pulumi.Input[str] repository: Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
        :param pulumi.Input[bool] reset: When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
        :param pulumi.Input[bool] reuse: When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `true`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sets: Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
        :param pulumi.Input[str] values: values in raw yaml to pass to helm. (Default: `empty`).
        :param pulumi.Input[str] version: Version of Cilium (Default: `v1.14.5`).
        :param pulumi.Input[bool] wait: Wait for Cilium status is ok (Default: `true`).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstallState.__new__(_InstallState)

        __props__.__dict__["data_path"] = data_path
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["repository"] = repository
        __props__.__dict__["reset"] = reset
        __props__.__dict__["reuse"] = reuse
        __props__.__dict__["sets"] = sets
        __props__.__dict__["values"] = values
        __props__.__dict__["version"] = version
        __props__.__dict__["wait"] = wait
        return Install(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dataPath")
    def data_path(self) -> pulumi.Output[str]:
        """
        Datapath mode to use { tunnel | native | aws-eni | gke | azure | aks-byocni } (Default: `autodetected`).
        """
        return pulumi.get(self, "data_path")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[str]:
        """
        Namespace in which to install (Default: `kube-system`).
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Output[str]:
        """
        Helm chart repository to download Cilium charts from (Default: `https://helm.cilium.io`).
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def reset(self) -> pulumi.Output[bool]:
        """
        When upgrading, reset the helm values to the ones built into the chart (Default: `false`).
        """
        return pulumi.get(self, "reset")

    @property
    @pulumi.getter
    def reuse(self) -> pulumi.Output[bool]:
        """
        When upgrading, reuse the helm values from the latest release unless any overrides from are set from other flags. This option takes precedence over HelmResetValues (Default: `true`).
        """
        return pulumi.get(self, "reuse")

    @property
    @pulumi.getter
    def sets(self) -> pulumi.Output[Sequence[str]]:
        """
        Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2 (Default: `[]`).
        """
        return pulumi.get(self, "sets")

    @property
    @pulumi.getter
    def values(self) -> pulumi.Output[str]:
        """
        values in raw yaml to pass to helm. (Default: `empty`).
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Version of Cilium (Default: `v1.14.5`).
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def wait(self) -> pulumi.Output[bool]:
        """
        Wait for Cilium status is ok (Default: `true`).
        """
        return pulumi.get(self, "wait")

