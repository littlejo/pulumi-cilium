# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ClustermeshConnectionArgs', 'ClustermeshConnection']

@pulumi.input_type
class ClustermeshConnectionArgs:
    def __init__(__self__, *,
                 destination_context: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ClustermeshConnection resource.
        :param pulumi.Input[str] destination_context: Kubernetes configuration context of destination cluster
        :param pulumi.Input[str] namespace: Namespace in which to install (Default: `kube-system`).
        """
        if destination_context is not None:
            pulumi.set(__self__, "destination_context", destination_context)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="destinationContext")
    def destination_context(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes configuration context of destination cluster
        """
        return pulumi.get(self, "destination_context")

    @destination_context.setter
    def destination_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_context", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace in which to install (Default: `kube-system`).
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class _ClustermeshConnectionState:
    def __init__(__self__, *,
                 destination_context: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ClustermeshConnection resources.
        :param pulumi.Input[str] destination_context: Kubernetes configuration context of destination cluster
        :param pulumi.Input[str] namespace: Namespace in which to install (Default: `kube-system`).
        """
        if destination_context is not None:
            pulumi.set(__self__, "destination_context", destination_context)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="destinationContext")
    def destination_context(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes configuration context of destination cluster
        """
        return pulumi.get(self, "destination_context")

    @destination_context.setter
    def destination_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_context", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace in which to install (Default: `kube-system`).
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


class ClustermeshConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_context: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Cluster Mesh connection resource. This is equivalent to cilium cli: `cilium clustermesh connect` and `cilium clustermesh disconnect`: It manages the connections between two Kubernetes clusters.

        ## Example Usage

        ```python
        import pulumi
        import littlejo_cilium as cilium

        example = cilium.ClustermeshConnection("example", destination_context="context-2")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] destination_context: Kubernetes configuration context of destination cluster
        :param pulumi.Input[str] namespace: Namespace in which to install (Default: `kube-system`).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ClustermeshConnectionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Cluster Mesh connection resource. This is equivalent to cilium cli: `cilium clustermesh connect` and `cilium clustermesh disconnect`: It manages the connections between two Kubernetes clusters.

        ## Example Usage

        ```python
        import pulumi
        import littlejo_cilium as cilium

        example = cilium.ClustermeshConnection("example", destination_context="context-2")
        ```

        :param str resource_name: The name of the resource.
        :param ClustermeshConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClustermeshConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_context: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClustermeshConnectionArgs.__new__(ClustermeshConnectionArgs)

            __props__.__dict__["destination_context"] = destination_context
            __props__.__dict__["namespace"] = namespace
        super(ClustermeshConnection, __self__).__init__(
            'cilium:index/clustermeshConnection:ClustermeshConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            destination_context: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None) -> 'ClustermeshConnection':
        """
        Get an existing ClustermeshConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] destination_context: Kubernetes configuration context of destination cluster
        :param pulumi.Input[str] namespace: Namespace in which to install (Default: `kube-system`).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClustermeshConnectionState.__new__(_ClustermeshConnectionState)

        __props__.__dict__["destination_context"] = destination_context
        __props__.__dict__["namespace"] = namespace
        return ClustermeshConnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="destinationContext")
    def destination_context(self) -> pulumi.Output[str]:
        """
        Kubernetes configuration context of destination cluster
        """
        return pulumi.get(self, "destination_context")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[str]:
        """
        Namespace in which to install (Default: `kube-system`).
        """
        return pulumi.get(self, "namespace")

