// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Cluster Mesh resource. This is equivalent to cilium cli: `cilium clustermesh enable` and `cilium clustermesh disable`: It manages the activation of Cluster Mesh on one Kubernetes cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cilium from "@littlejo/cilium";
 *
 * const exampleInstall = new cilium.Install("exampleInstall", {
 *     sets: [
 *         "cluster.name=clustermesh1",
 *         "cluster.id=1",
 *         "ipam.mode=kubernetes",
 *     ],
 *     version: "1.14.5",
 * });
 * const exampleClustermesh = new cilium.Clustermesh("exampleClustermesh", {serviceType: "LoadBalancer"}, {
 *     dependsOn: [exampleInstall],
 * });
 * ```
 */
export class Clustermesh extends pulumi.CustomResource {
    /**
     * Get an existing Clustermesh resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClustermeshState, opts?: pulumi.CustomResourceOptions): Clustermesh {
        return new Clustermesh(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cilium:index/clustermesh:Clustermesh';

    /**
     * Returns true if the given object is an instance of Clustermesh.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Clustermesh {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Clustermesh.__pulumiType;
    }

    /**
     * Enable support for external workloads, such as VMs (Default: `false`).
     */
    public readonly enableExternalWorkloads!: pulumi.Output<boolean>;
    /**
     * Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
     */
    public readonly enableKvStoreMesh!: pulumi.Output<boolean>;
    /**
     * Namespace in which to install (Default: `kube-system`).
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
     */
    public readonly serviceType!: pulumi.Output<string>;
    /**
     * Wait Cluster Mesh status is ok (Default: `true`).
     */
    public readonly wait!: pulumi.Output<boolean>;

    /**
     * Create a Clustermesh resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClustermeshArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClustermeshArgs | ClustermeshState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClustermeshState | undefined;
            resourceInputs["enableExternalWorkloads"] = state ? state.enableExternalWorkloads : undefined;
            resourceInputs["enableKvStoreMesh"] = state ? state.enableKvStoreMesh : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["wait"] = state ? state.wait : undefined;
        } else {
            const args = argsOrState as ClustermeshArgs | undefined;
            resourceInputs["enableExternalWorkloads"] = args ? args.enableExternalWorkloads : undefined;
            resourceInputs["enableKvStoreMesh"] = args ? args.enableKvStoreMesh : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["wait"] = args ? args.wait : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Clustermesh.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Clustermesh resources.
 */
export interface ClustermeshState {
    /**
     * Enable support for external workloads, such as VMs (Default: `false`).
     */
    enableExternalWorkloads?: pulumi.Input<boolean>;
    /**
     * Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
     */
    enableKvStoreMesh?: pulumi.Input<boolean>;
    /**
     * Namespace in which to install (Default: `kube-system`).
     */
    namespace?: pulumi.Input<string>;
    /**
     * Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
     */
    serviceType?: pulumi.Input<string>;
    /**
     * Wait Cluster Mesh status is ok (Default: `true`).
     */
    wait?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Clustermesh resource.
 */
export interface ClustermeshArgs {
    /**
     * Enable support for external workloads, such as VMs (Default: `false`).
     */
    enableExternalWorkloads?: pulumi.Input<boolean>;
    /**
     * Enable kvstoremesh, an extension which caches remote cluster information in the local kvstore (Cilium >=1.14 only) (Default: `false`).
     */
    enableKvStoreMesh?: pulumi.Input<boolean>;
    /**
     * Namespace in which to install (Default: `kube-system`).
     */
    namespace?: pulumi.Input<string>;
    /**
     * Type of Kubernetes service to expose control plane { LoadBalancer | NodePort | ClusterIP } (Default: `autodetected`).
     */
    serviceType?: pulumi.Input<string>;
    /**
     * Wait Cluster Mesh status is ok (Default: `true`).
     */
    wait?: pulumi.Input<boolean>;
}
