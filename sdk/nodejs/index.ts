// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClustermeshArgs, ClustermeshState } from "./clustermesh";
export type Clustermesh = import("./clustermesh").Clustermesh;
export const Clustermesh: typeof import("./clustermesh").Clustermesh = null as any;
utilities.lazyLoad(exports, ["Clustermesh"], () => require("./clustermesh"));

export { ClustermeshConnectionArgs, ClustermeshConnectionState } from "./clustermeshConnection";
export type ClustermeshConnection = import("./clustermeshConnection").ClustermeshConnection;
export const ClustermeshConnection: typeof import("./clustermeshConnection").ClustermeshConnection = null as any;
utilities.lazyLoad(exports, ["ClustermeshConnection"], () => require("./clustermeshConnection"));

export { ConfigArgs, ConfigState } from "./config";
export type Config = import("./config").Config;
export const Config: typeof import("./config").Config = null as any;
utilities.lazyLoad(exports, ["Config"], () => require("./config"));

export { GetHelmValuesArgs, GetHelmValuesResult, GetHelmValuesOutputArgs } from "./getHelmValues";
export const getHelmValues: typeof import("./getHelmValues").getHelmValues = null as any;
export const getHelmValuesOutput: typeof import("./getHelmValues").getHelmValuesOutput = null as any;
utilities.lazyLoad(exports, ["getHelmValues","getHelmValuesOutput"], () => require("./getHelmValues"));

export { HubbleArgs, HubbleState } from "./hubble";
export type Hubble = import("./hubble").Hubble;
export const Hubble: typeof import("./hubble").Hubble = null as any;
utilities.lazyLoad(exports, ["Hubble"], () => require("./hubble"));

export { InstallArgs, InstallState } from "./install";
export type Install = import("./install").Install;
export const Install: typeof import("./install").Install = null as any;
utilities.lazyLoad(exports, ["Install"], () => require("./install"));

export { KubeproxyFreeArgs, KubeproxyFreeState } from "./kubeproxyFree";
export type KubeproxyFree = import("./kubeproxyFree").KubeproxyFree;
export const KubeproxyFree: typeof import("./kubeproxyFree").KubeproxyFree = null as any;
utilities.lazyLoad(exports, ["KubeproxyFree"], () => require("./kubeproxyFree"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cilium:index/clustermesh:Clustermesh":
                return new Clustermesh(name, <any>undefined, { urn })
            case "cilium:index/clustermeshConnection:ClustermeshConnection":
                return new ClustermeshConnection(name, <any>undefined, { urn })
            case "cilium:index/config:Config":
                return new Config(name, <any>undefined, { urn })
            case "cilium:index/hubble:Hubble":
                return new Hubble(name, <any>undefined, { urn })
            case "cilium:index/install:Install":
                return new Install(name, <any>undefined, { urn })
            case "cilium:index/kubeproxyFree:KubeproxyFree":
                return new KubeproxyFree(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cilium", "index/clustermesh", _module)
pulumi.runtime.registerResourceModule("cilium", "index/clustermeshConnection", _module)
pulumi.runtime.registerResourceModule("cilium", "index/config", _module)
pulumi.runtime.registerResourceModule("cilium", "index/hubble", _module)
pulumi.runtime.registerResourceModule("cilium", "index/install", _module)
pulumi.runtime.registerResourceModule("cilium", "index/kubeproxyFree", _module)
pulumi.runtime.registerResourcePackage("cilium", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cilium") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
