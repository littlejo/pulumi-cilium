// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Disable Kube-Proxy DaemonSet, equivalent to: `kubectl -n kube-system patch daemonset kube-proxy -p '"spec": {"template": {"spec": {"nodeSelector": {"non-existing": "true"}}}}'`.
 */
export class KubeproxyFree extends pulumi.CustomResource {
    /**
     * Get an existing KubeproxyFree resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubeproxyFreeState, opts?: pulumi.CustomResourceOptions): KubeproxyFree {
        return new KubeproxyFree(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cilium:index/kubeproxyFree:KubeproxyFree';

    /**
     * Returns true if the given object is an instance of KubeproxyFree.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubeproxyFree {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubeproxyFree.__pulumiType;
    }

    /**
     * Name of DaemonSet (Default: `kube-proxy`).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Namespace in which to install (Default: `kube-system`).
     */
    public readonly namespace!: pulumi.Output<string>;

    /**
     * Create a KubeproxyFree resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KubeproxyFreeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubeproxyFreeArgs | KubeproxyFreeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubeproxyFreeState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
        } else {
            const args = argsOrState as KubeproxyFreeArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubeproxyFree.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubeproxyFree resources.
 */
export interface KubeproxyFreeState {
    /**
     * Name of DaemonSet (Default: `kube-proxy`).
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace in which to install (Default: `kube-system`).
     */
    namespace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubeproxyFree resource.
 */
export interface KubeproxyFreeArgs {
    /**
     * Name of DaemonSet (Default: `kube-proxy`).
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace in which to install (Default: `kube-system`).
     */
    namespace?: pulumi.Input<string>;
}
