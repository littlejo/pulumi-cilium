// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Config resource for Cilium. This is equivalent to cilium cli: `cilium config`: It manages the cilium Kubernetes ConfigMap resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cilium from "@littlejo/cilium";
 *
 * const example = new cilium.Config("example", {
 *     key: "debug",
 *     value: "true",
 * });
 * ```
 */
export class Config extends pulumi.CustomResource {
    /**
     * Get an existing Config resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigState, opts?: pulumi.CustomResourceOptions): Config {
        return new Config(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cilium:index/config:Config';

    /**
     * Returns true if the given object is an instance of Config.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Config {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Config.__pulumiType;
    }

    /**
     * Key of the config
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * Namespace in which to install (Default: `kube-system`).
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Restart Cilium pods (Default: `true`).
     */
    public readonly restart!: pulumi.Output<boolean>;
    /**
     * Value of the key
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a Config resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigArgs | ConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigState | undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["restart"] = state ? state.restart : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as ConfigArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["restart"] = args ? args.restart : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Config.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Config resources.
 */
export interface ConfigState {
    /**
     * Key of the config
     */
    key?: pulumi.Input<string>;
    /**
     * Namespace in which to install (Default: `kube-system`).
     */
    namespace?: pulumi.Input<string>;
    /**
     * Restart Cilium pods (Default: `true`).
     */
    restart?: pulumi.Input<boolean>;
    /**
     * Value of the key
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Config resource.
 */
export interface ConfigArgs {
    /**
     * Key of the config
     */
    key: pulumi.Input<string>;
    /**
     * Namespace in which to install (Default: `kube-system`).
     */
    namespace?: pulumi.Input<string>;
    /**
     * Restart Cilium pods (Default: `true`).
     */
    restart?: pulumi.Input<boolean>;
    /**
     * Value of the key
     */
    value: pulumi.Input<string>;
}
